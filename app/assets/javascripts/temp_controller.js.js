// Generated by CoffeeScript 1.7.1
var tempApp;

tempApp = angular.module('tempApp', []);

tempApp.controller('TempCtrl', [
  '$scope', '$http', function($scope, $http) {
    var config, fetchTempData, initTemp, renderGraph, url;
    url = "" + Temp.ApiPrefix + "/" + Temp.DotideDb + "/datastreams/temp/datapoints?order=asc";
    config = {
      method: "GET",
      url: url,
      headers: {
        "Authorization": "Bearer " + Temp.ReadToken
      }
    };
    $scope.points = [];
    this.initGraph();
    $scope.filterDate = function(clickevent) {
      console.log('hi');
      return console.log('clickevent');
    };
    ({
      initGraph: function() {
        var axes, graph, hoverDetail, legend, y_axis;
        graph = new Rickshaw.Graph({
          element: document.querySelector('#temp-graph'),
          renderer: 'line',
          interpolation: 'linear',
          series: [
            {
              color: "#ff0059",
              name: '温度',
              data: $scope.points
            }
          ]
        });
        axes = new Rickshaw.Graph.Axis.Time({
          graph: graph
        });
        y_axis = new Rickshaw.Graph.Axis.Y({
          graph: graph,
          tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
          ticksTreatment: 'glow'
        });
        hoverDetail = new Rickshaw.Graph.HoverDetail({
          graph: graph
        });
        legend = new Rickshaw.Graph.Legend({
          element: document.querySelector('#legend'),
          graph: graph
        });
        graph.render();
        $('.timepicker-start').pickadate();
        return $('.timepicker-end').pickadate();
      }
    });
    initTemp = function() {
      var end, start;
      start = $('#datetimestart').val();
      end = $('#datetimeend').val();
      return this.fetchTempData(new Date(start), new Date(end));
    };
    fetchTempData = function(start, end) {
      var endIso, startIso;
      endIso = end.toISOString();
      startIso = start.toISOString();
      config.data = {
        data: {
          start: startIso,
          end: endIso,
          order: 'asc'
        }
      };
      return $http(config).success(function(data) {
        var point, _fn, _i, _len, _ref;
        $scope.data = data;
        _ref = $scope.data.datapoints;
        _fn = function(point) {
          var date, tmp;
          tmp = {};
          date = new Date(point.t);
          tmp.x = Date.parse(date) / 1000;
          tmp.y = point.v;
          return $scope.points.push(tmp);
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          _fn(point);
        }
        return this.renderGraph();
      });
    };
    renderGraph = function() {
      graph.series[0].data = $scope.points;
      return graph.render();
    };
    return setInterval(function() {
      return $http(config).success(function(data) {
        var point, _fn, _i, _len, _ref;
        $scope.data = data;
        $scope.points = [];
        _ref = $scope.data.datapoints;
        _fn = function(point) {
          var date, tmp;
          tmp = {};
          date = new Date(point.t);
          tmp.x = Date.parse(date) / 1000;
          tmp.y = point.v;
          return $scope.points.push(tmp);
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          _fn(point);
        }
        graph.series[0].data = $scope.points;
        return graph.render();
      });
    }, 3000);
  }
]);
